// Mocks generated by Mockito 5.3.2 from annotations
// in the_sss_store/test/repository/storage_repository/storage_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:the_sss_store/model/item.dart' as _i5;
import 'package:the_sss_store/services/firebase/firebase_storage_api.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDocumentReference_0<T extends Object?> extends _i1.SmartFake
    implements _i2.DocumentReference<T> {
  _FakeDocumentReference_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReference_1<T extends Object?> extends _i1.SmartFake
    implements _i2.CollectionReference<T> {
  _FakeCollectionReference_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseStorageAPI].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseStorageAPI extends _i1.Mock
    implements _i3.FirebaseStorageAPI {
  MockFirebaseStorageAPI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get storagesCollectionName => (super.noSuchMethod(
        Invocation.getter(#storagesCollectionName),
        returnValue: '',
      ) as String);
  @override
  String get stockCollectionName => (super.noSuchMethod(
        Invocation.getter(#stockCollectionName),
        returnValue: '',
      ) as String);
  @override
  _i2.DocumentReference<Object?> getStorageDocument(String? documentID) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStorageDocument,
          [documentID],
        ),
        returnValue: _FakeDocumentReference_0<Object?>(
          this,
          Invocation.method(
            #getStorageDocument,
            [documentID],
          ),
        ),
      ) as _i2.DocumentReference<Object?>);
  @override
  _i2.CollectionReference<Object?> getStockCollection(String? documentID) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStockCollection,
          [documentID],
        ),
        returnValue: _FakeCollectionReference_1<Object?>(
          this,
          Invocation.method(
            #getStockCollection,
            [documentID],
          ),
        ),
      ) as _i2.CollectionReference<Object?>);
  @override
  _i4.Future<List<_i5.Item>> getItemList(String? documentID) =>
      (super.noSuchMethod(
        Invocation.method(
          #getItemList,
          [documentID],
        ),
        returnValue: _i4.Future<List<_i5.Item>>.value(<_i5.Item>[]),
      ) as _i4.Future<List<_i5.Item>>);
  @override
  _i4.Future<String?> getItemDocumentID(
    String? storageDocument,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getItemDocumentID,
          [
            storageDocument,
            name,
          ],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
  @override
  void addItem(
    String? documentID,
    String? itemName,
    int? stock,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addItem,
          [
            documentID,
            itemName,
            stock,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<void> removeItem(
    String? documentID,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeItem,
          [
            documentID,
            name,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<bool> itemFound(
    String? storageDocument,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #itemFound,
          [
            storageDocument,
            name,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
